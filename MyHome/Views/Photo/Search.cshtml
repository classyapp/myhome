@model Classy.DotNet.Mvc.ViewModels.Listing.SearchListingsViewModel<MyHome.Models.PhotoMetadata>

@{
    var rooms = Localizer.GetList("rooms");
    var styles = Localizer.GetList("room-styles");

    ViewBag.Title = string.Format(Localizer.Get("PhotoSearch_PageTitle"), !string.IsNullOrEmpty(Model.Metadata.Style) ? styles.Single(x => x.Value == Model.Metadata.Style).Text : "", !string.IsNullOrEmpty(Model.Metadata.Room) ? rooms.Single(x => x.Value == Model.Metadata.Room).Text : Localizer.Get("PhotoSearch_Home"));
    ViewBag.MetaDescription = string.Format(Localizer.Get("PhotoSearch_MetaDescription"), !string.IsNullOrEmpty(Model.Metadata.Style) ? styles.Single(x => x.Value == Model.Metadata.Style).Text : "", !string.IsNullOrEmpty(Model.Metadata.Room) ? rooms.Single(x => x.Value == Model.Metadata.Room).Text : Localizer.Get("PhotoSearch_Home"));
    var totalPages = (int)Math.Ceiling((decimal)Model.Count / Classy.DotNet.Responses.AppView.PageSize);
}

@section ActionBar {
    @Html.Partial("~/Views/Photo/EditorTools.cshtml")
}

<div class="row">
    <div class="sidebar col-md-3">
        <div class="panel panel-default panel-first">
            <div class="panel-heading">
                <h3 class="panel-title">@Localizer.Get("PhotoSearch_Title_Rooms")</h3>
            </div>
            <div class="panel-body panel-links">
                @foreach (var r in rooms)
                {
                    @Html.RouteLinkForCurrentLocale(r.Text, "SearchPhoto", new { filters = new MyHome.Models.PhotoMetadata { Room = r.Value }.GetSearchFilterSlug(null, Model.Location) })
                }
            </div>
        </div>

        <div class="panel panel-default">
            <div class="panel-heading">
                <h3 class="panel-title">@Localizer.Get("PhotoSearch_Title_Styles")</h3>
            </div>
            <div class="panel-body panel-links">
                @foreach (var s in styles)
                {
                    @Html.RouteLinkForCurrentLocale(s.Text, "SearchPhoto", new { filters = new MyHome.Models.PhotoMetadata { Style = s.Value, Room = Model.Metadata.Room }.GetSearchFilterSlug(null, Model.Location) })
                }
            </div>
        </div>

        <div class="panel panel-default">
            <div class="panel-heading">
                <h3 class="panel-title">@Localizer.Get("SearchPhotos_Sidebar_Popular")</h3>
            </div>
            <div class="panel-body panel-links">
                @Html.RouteLinkForCurrentLocale("#wallpaper", "SearchPhoto", new { filters = "wallpaper" })
            </div>
        </div>
    </div>

    <div class="main col-md-9">
        <h1>
            @string.Format(Localizer.Get("SearchPhotos_Results_Title"), Model.Count, Model.Tag)
        </h1>
        <div class="label-container">
            @{ 
                var hasRoom = !string.IsNullOrEmpty(Model.Metadata.Room);
                var hasStyle = !string.IsNullOrEmpty(Model.Metadata.Style);
                var hasTag = !string.IsNullOrEmpty(Model.Tag);
                var hasRoomOrStyle = hasRoom || hasStyle;
                var hasStyleOrTag = hasStyle || hasTag;
                var hasRoomOrTag = hasRoom || hasTag;
            }

            <span class="hidden" itemscope itemtype="http://data-vocabulary.org/Breadcrumb">
                <a itemprop="url" href="@Url.RouteUrlForCurrentLocale("SearchPhoto", new { filters = "" })"><span itemprop="title">@Localizer.Get("PhotoSearch_AllPhotos")</span></a>
            </span>
            @if (hasRoom)
            {
                <span class="label label-danger" itemscope itemtype="http://data-vocabulary.org/Breadcrumb">
                    <a class="content" itemprop="url" href="@Url.RouteUrlForCurrentLocale("SearchPhoto", new { filters = new MyHome.Models.PhotoMetadata { Room = Model.Metadata.Room }.GetSearchFilterSlug(null, null) })"><span itemprop="title">@rooms.Single(x => x.Value == Model.Metadata.Room).Text</span></a>
                    <a class="dismiss" href="@Url.RouteUrlForCurrentLocale("SearchPhoto", new { filters = new MyHome.Models.PhotoMetadata { }.GetSearchFilterSlug(null, null) })">x</a>
                </span>
                if (hasStyle)
                {
                    <span class="label label-danger" itemscope itemtype="http://data-vocabulary.org/Breadcrumb">
                        <a class="content" itemprop="url" href="@Url.RouteUrlForCurrentLocale("SearchPhoto", new { filters = new MyHome.Models.PhotoMetadata { Room = Model.Metadata.Room, Style = Model.Metadata.Style }.GetSearchFilterSlug(null, null) })"><span itemprop="title">@styles.Single(x => x.Value == Model.Metadata.Style).Text</span></a>
                        <a class="dismiss" href="@Url.RouteUrlForCurrentLocale("SearchPhoto", new { filters = new MyHome.Models.PhotoMetadata { Room = Model.Metadata.Room }.GetSearchFilterSlug(null, null) })">x</a>
                    </span>
                }
                if (hasTag)
                {
                    <span class="label label-danger" itemscope itemtype="http://data-vocabulary.org/Breadcrumb">
                        <a class="content" itemprop="url" href="@Url.RouteUrlForCurrentLocale("SearchPhoto", new { filters = new MyHome.Models.PhotoMetadata { Room = Model.Metadata.Room }.GetSearchFilterSlug(Model.Tag, null) })"><span itemprop="title">@Model.Tag</span></a>
                        <a class="dismiss" href="@Url.RouteUrlForCurrentLocale("SearchPhoto", new { filters = new MyHome.Models.PhotoMetadata { Room = Model.Metadata.Room }.GetSearchFilterSlug(null, null) })">x</a>
                    </span>
                }
            }
            
        </div>

        <hr />

        <div class="search-form">
            <!--
            @using (var f = Html.Bootstrap().Begin(new Form("Search", "Photo").Type(FormType.Inline).FormMethod(FormMethod.Post)))
            {
                    @* to support postback *@ 
                    @Html.HiddenFor(x => x.Metadata.Room)
                    @Html.HiddenFor(x => x.Metadata.Style)

                    @* form on screen *@
                    @f.FormGroup().TextBoxFor(x => x.Tag).Placeholder(Localizer.Get("Search_Keyword")).Label().Class("sr-only")
                    @f.FormGroup().TextBoxFor(x => x.PriceMin).Placeholder(Localizer.Get("Search_CostFrom")).Label().Class("sr-only")
                    @f.FormGroup().TextBoxFor(x => x.PriceMax).Placeholder(Localizer.Get("Search_CostTo")).Label().Class("sr-only")
                    @Html.Bootstrap().SubmitButton().Style(ButtonStyle.Primary).Text(Localizer.Get("Search_Submit"))
            }-->
        </div>

        <div id="photos" class="row iscroll" data-item-class=".thumbnail" data-hasMore="@(Model.Results.Count == Classy.DotNet.Responses.AppView.PageSize ? "true" : "false")" 
             data-url="@Model.PagingUrl"
             data-page-size="@Classy.DotNet.Responses.AppView.PageSize" data-page="@(string.IsNullOrEmpty(Request["page"]) ? 1 : int.Parse(Request["page"]))">
            @if (Model.Results != null)
            {
                @Html.Partial("PhotoGrid", new MyHome.Models.PhotoGridViewModel { Results = Model.Results, ThumbnailSize = 270 })
            }
        </div>
        @if (totalPages > 1)
        {
            <div class="clearfix text-center hidden" id="iscrollLoading"><img src="~/img/ajax-loader.gif" /></div>
            <div id="pager" class="text-center" style="font-size: 12px">
                <ul class="pagination" data-total="@(totalPages)" 
                    data-pages="@Classy.DotNet.Responses.AppView.PagesCount">
                    <li><a href="#">@Localizer.Get("Paging_Prev")</a></li>
                    @for (int i = 0; i < Classy.DotNet.Responses.AppView.PagesCount; i++)
                    {
                        <li><a href="#">@(i + 1)</a></li>
                    }
                    <li><a href="#">@Localizer.Get("Paging_Next")</a></li>
                </ul>
                @if (Request["Page"] == null || int.Parse(Request["Page"]) < totalPages)
                {
                    <a href="@(Model.PagingUrl + string.Format("?Page={0}", Request["Page"] == null ? 2 : int.Parse(Request["Page"]) + 1))" class="sr-only">Next Page</a>
                }
            </div>
        }
    </div>
</div>

@section scripts {
    <script src="~/Scripts/iscroll.js"></script>
    <script>
        $(function () {
            resetPagination(@(string.IsNullOrEmpty(Request["page"]) ? 1 : int.Parse(Request["page"])));
        });
    </script>
}