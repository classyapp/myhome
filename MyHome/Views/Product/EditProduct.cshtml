@model Classy.DotNet.Mvc.ViewModels.Listing.UpdateListingViewModel<MyHome.Models.ProductMetadata>

@{
    Html.Bootstrap().Globals().ShowRequiredStar(false);
}

@section AdditionalStyles {
    <link rel="stylesheet" href="~/Content/ltr/magicsuggest.css" />
}

@section ActionBar {
    <a class="btn btn-sm btn-primary" trigger-listing-action="translate" object-id="@Model.Id" object-type="photo"><i class="glyphicon glyphicon-globe"></i>&nbsp;@Localizer.Get("EditListing_Translate")</a>
}

<div class="row">
    <div class="col-md-12">
        <div class="ajax-alert"></div>
        @if (TempData["EditListingSuccess"] != null)
        {
            @Html.Bootstrap().Alert(Localizer.Get("EditListing_Success")).Style(AlertColor.Success)
        }
        <h1>@Localizer.Get("EditListing_FormTitle")</h1>
        <hr />
        <div class="row">
            <div class="col-md-8">
                @using (var f = Html.Bootstrap().Begin(new Form("EditListing", "Product").Type(FormType._NotSet).FormMethod(FormMethod.Post)))
                {
                    @Html.Bootstrap().ValidationSummary()
                    @Html.HiddenFor(x => x.Id)
                    @f.FormGroup().TextBoxFor(x => x.Title).ShowValidationMessage(false)
                    @f.FormGroup().TextAreaFor(x => x.Content).ShowValidationMessage(false)
                    @f.FormGroup().TextBoxFor(x => x.Categories).ShowValidationMessage(false)

                    <div class="row">
                        @Html.HiddenFor(x => x.PricingInfo.CurrencyCode)
                        @if (Model.PricingInfo.PurchaseOptions.Count == 1) // simple product
                        {
                            @f.FormGroup().TextBoxFor(x => x.PricingInfo.PurchaseOptions[0].SKU).WidthMd(4)
                            @f.FormGroup().TextBoxFor(x => x.PricingInfo.PurchaseOptions[0].Price).WidthMd(4)
                            @f.FormGroup().TextBoxFor(x => x.PricingInfo.PurchaseOptions[0].CompareAtPrice).WidthMd(4)

                            @f.FormGroup().TextBoxFor(x => x.PricingInfo.PurchaseOptions[0].Width).WidthMd(4)
                            @f.FormGroup().TextBoxFor(x => x.PricingInfo.PurchaseOptions[0].Depth).WidthMd(4)
                            @f.FormGroup().TextBoxFor(x => x.PricingInfo.PurchaseOptions[0].Height).WidthMd(4)
                        }
                    </div>
                    
                    <hr />
                    <h4>@Localizer.Get("EditListing_Variations")</h4>
                    <div class="checkbox">
                        <label>
                            <input type="checkbox" onchange="showVariationsEditor(this)" @(Model.PricingInfo.PurchaseOptions.Count > 1 ? "checked" : string.Empty) id="hasVariations" name="hasVariations">
                            @Localizer.Get("EditListing_HasVariations")
                        </label>
                    </div>
                    <div class="well @(Model.PricingInfo.PurchaseOptions.Count > 1 ? string.Empty : "hidden")">
                        <div class="row">
                            <div class="col-md-3">@Localizer.Get("EditListing_OptionName")</div>
                            <div class="col-md-9">@Localizer.Get("EditListing_OptionValues")</div>
                        </div>
                        @foreach (var key in Model.PricingInfo.PurchaseOptions[0].VariantProperties.Keys)
                        {
                            <div class="row variant">
                                <div class="col-md-3">@key</div>
                                <div class="col-md-8">
                                    <input type="text" class="form-control" value="@Model.PricingInfo.GetVariantOptionValues(key)"/></div>
                                <div class="col-md-1">
                                    <button type="button" class="btn btn-sm btn-default"><i class="glyphicon glyphicon-trash"></i></button>
                                </div>
                            </div>   
                        }
                        <div class="row">
                            <a class="col-lg-12" href="#">@Localizer.Get("EditListing_AddPurchaseOption")</a>
                        </div>
                    </div>
                    <div class="options @(Model.PricingInfo.PurchaseOptions.Count > 1 ? string.Empty : "hidden")">
                        <div class="row">
                            <div class="col-md-12">
                                <table class="table table-striped">
                                    <tbody>
                                        @for (int i = 0; i < Model.PricingInfo.PurchaseOptions.Count; i++)
                                        {
                                            <tr>
                                                @foreach (var key in Model.PricingInfo.PurchaseOptions[i].VariantProperties.Keys)
                                                {
                                                    <td>@Model.PricingInfo.PurchaseOptions[i].VariantProperties[key]</td>    
                                                }
                                                <td style="width: 100px">@f.FormGroup().TextBoxFor(x => Model.PricingInfo.PurchaseOptions[i].SKU).Placeholder("SKU").Label().Class("hidden")</td>
                                                <td style="width: 90px">@f.FormGroup().TextBoxFor(x => Model.PricingInfo.PurchaseOptions[i].Price).Placeholder("Price").Label().Class("hidden")</td>
                                                <td style="width: 90px">@f.FormGroup().TextBoxFor(x => Model.PricingInfo.PurchaseOptions[i].CompareAtPrice).Placeholder("Compare at price").Label().Class("hidden")</td>
                                                <td style="width: 80px">@f.FormGroup().TextBoxFor(x => Model.PricingInfo.PurchaseOptions[i].Quantity).Placeholder("Quantity").Label().Class("hidden")</td>
                                                <td style="width: 110px">
                                                    <div class="btn-group">
                                                        <button type="button" class="btn btn-default">Edit</button>
                                                        <button type="button" class="btn btn-default"><i class="glyphicon glyphicon-trash"></i></button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                        
                    <div class="clearfix"></div>
                    @f.FormGroup().CustomControls(Html.Bootstrap().SubmitButton().Text(Localizer.Get("EditProduct_Submit")).Style(ButtonStyle.Primary))
                }
            </div>

            <div class="col-md-4">
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="translate-modal" data-remote="" role="dialog">
    <div class="modal-dialog modal-lg">
        <div class="modal-content" id="translate-modal-replace">
            <!-- will be replaced -->
        </div>
    </div>
</div>

@section scripts
{
    <script type="text/javascript" src="~/Scripts/magicsuggest.js"></script>
    <script type="text/javascript">
        function showVariationsEditor(chk) {
            var hasOptions = $(chk).is(":checked");
            $(chk).closest("div").next().toggleClass("hidden", !hasOptions);
            $("div.options").toggleClass("hidden", !hasOptions);
        }
        $("#Categories").attr("value", '@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Classy.DotNet.Responses.AppView.ProductCategories.Where(p => Model.Categories.Contains(p.Value)).Select(p => new { id = p.Value, name = p.Text[System.Threading.Thread.CurrentThread.CurrentUICulture.TwoLetterISOLanguageName] }).ToArray()))');
        $("#Categories").magicSuggest({
            placeholder: 'Select categories',
            allowFreeEntries: false,
            valueField: 'id',
            name: 'Categories',
            displayField: 'name',
            data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Classy.DotNet.Responses.AppView.ProductCategories.Select(c => new { id = c.Value, name = c.Text[System.Threading.Thread.CurrentThread.CurrentUICulture.TwoLetterISOLanguageName] })))
            });

        //msCatergories.setSelection();
    </script>
}
