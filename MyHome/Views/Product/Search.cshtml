@using Classy.DotNet.Responses
@model Classy.DotNet.Mvc.ViewModels.Listing.SearchListingsViewModel<MyHome.Models.ProductMetadata>

@{
    var allCategories = Localizer.GetList("product-categories");
    var topLevelCategories = allCategories.Where(x => x.ParentValue == null);
    
    var chosenCategory = Model.Category;
    var categories = chosenCategory == null ? topLevelCategories : allCategories.Where(x => x.ParentValue == chosenCategory);
    
    var settings = ViewBag.AppSettings as AppSettingsResponse;

    //ViewBag.Title = string.Format(Localizer.Get("PhotoSearch_PageTitle"), !string.IsNullOrEmpty(Model.Metadata.Style) ? styles.Single(x => x.Value == Model.Metadata.Style).Text : "", !string.IsNullOrEmpty(Model.Metadata.Room) ? rooms.Single(x => x.Value == Model.Metadata.Room).Text : Localizer.Get("PhotoSearch_Home"));
    //ViewBag.MetaDescription = string.Format(Localizer.Get("PhotoSearch_MetaDescription"), !string.IsNullOrEmpty(Model.Metadata.Style) ? styles.Single(x => x.Value == Model.Metadata.Style).Text : "", !string.IsNullOrEmpty(Model.Metadata.Room) ? rooms.Single(x => x.Value == Model.Metadata.Room).Text : Localizer.Get("PhotoSearch_Home"));
    ViewBag.DisableSignupBanner = true;
    var totalPages = (int)Math.Ceiling((decimal)Model.Count / AppView.PageSize);
}

<div class="row">
    <div class="sidebar col-md-3">
        <div class="panel panel-default panel-first">
            <div class="panel-heading">
                <h3 class="panel-title">@Localizer.Get("ProductSearch_Title_Categories")</h3>
            </div>
            <div class="panel-body panel-links">
                @if (chosenCategory != null)
                {
                    <div class="chosen-category">
                        @Html.RouteLinkForCurrentLocale(chosenCategory, "ProductSearch", new { categories = "" })
                    </div>
                }
                @foreach (var category in categories.Take(12))
                {
                    <div class="category @(chosenCategory != null ? "sub-category" : "")">
                        @Html.RouteLinkForCurrentLocale(category.Text, "ProductSearch", new { categories = category.Text.ToSlug() })
                    </div>
                }
            </div>
        </div>

        <div class="panel panel-default">
            <div class="panel-heading">
                <h3 class="panel-title">@Localizer.Get("ProductSearch_Title_Price")</h3>
            </div>
            <div class="panel-body panel-links">
                <div class="price-range">
                    <div class="price-from price-range">
                        <input type="checkbox" id="from-price-enabled" name="from-price-enabled"/>
                        <label for="from-price-enabled">@Localizer.Get("ProductSearch_PriceFromLabel")</label>
                        <input type="text" id="from-price-value" data-slider="true" value="@Request.QueryString["priceMin"]" data-slider-range="0,10000" data-slider-step="100" />
                    </div>
                    <div class="price-to price-range">
                        <input type="checkbox" id="to-price-enabled"/>
                        <label for="to-price-enabled">@Localizer.Get("ProductSearch_PriceToLabel")</label>
                        <input type="text" id="to-price-value" data-slider="true" value="@(string.IsNullOrEmpty(Request.QueryString["priceMax"]) ? "10000" : Request.QueryString["priceMax"])" data-slider-range="0,10000" data-slider-step="100" />
                    </div>
                    <div>
                        <span class="btn btn-primary filter-price-range pull-right">@Localizer.Get("ProductSearch_FilterButton")</span>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <div class="main col-md-9">
        <h1>
            @string.Format(Localizer.Get("SearchProducts_Results_Title"), Model.Count, Model.Tag)
        </h1>
        <div class="label-container">
            
            <span class="hidden" itemscope itemtype="http://data-vocabulary.org/Breadcrumb">
                <a itemprop="url" href="@Url.RouteUrlForCurrentLocale("SearchPhoto", new { filters = "" })"><span itemprop="title">@Localizer.Get("PhotoSearch_AllPhotos")</span></a>
            </span>
            
        </div>

        <hr />

        <div id="photos" class="row iscroll" data-item-class=".thumbnail" data-hasMore="@(Model.Results.Count == AppView.PageSize ? "true" : "false")" 
             data-url="@Model.PagingUrl"
             data-page-size="@AppView.PageSize" data-page="@(string.IsNullOrEmpty(Request["page"]) ? 1 : int.Parse(Request["page"]))">
            @if (Model.Results != null)
            {
                @Html.Partial("ProductGrid", new MyHome.Models.PhotoGridViewModel { Results = Model.Results, ThumbnailSize = 270 })
            }
        </div>
        @if (totalPages > 1)
        {
            <div class="clearfix text-center hidden" id="iscrollLoading"><img src="~/img/ajax-loader.gif" /></div>
            <div id="pager" class="text-center" style="font-size: 12px">
                <ul class="pagination" data-total="@(totalPages)" 
                    data-pages="@AppView.PagesCount">
                    <li><a href="#">@Localizer.Get("Paging_Prev")</a></li>
                    @for (int i = 0; i < AppView.PagesCount; i++)
                    {
                        <li><a href="#">@(i + 1)</a></li>
                    }
                    <li><a href="#">@Localizer.Get("Paging_Next")</a></li>
                </ul>
                @if (Request["Page"] == null || int.Parse(Request["Page"]) < totalPages)
                {
                    <a href="@(Model.PagingUrl + string.Format("?Page={0}", Request["Page"] == null ? 2 : int.Parse(Request["Page"]) + 1))" class="sr-only">Next Page</a>
                }
            </div>
        }
    </div>
</div>

@section scripts {
    <link href="~/Content/ltr/simple-slider.css" rel="stylesheet"/>
    <link href="~/Content/ltr/simple-slider-volume.css" rel="stylesheet" />
    <script src="~/Scripts/simple-slider.js"></script>
    <script src="~/Scripts/iscroll.js"></script>
    <script>
        $(function () {
            resetPagination(@(string.IsNullOrEmpty(Request["page"]) ? 1 : int.Parse(Request["page"])));
        });

        var currencySymbol = '@settings.DefaultCurrency';
        $("[data-slider]").each(function () {
            var input = $(this);
            $("<span>").addClass("output").insertAfter($(this));
        }).bind("slider:ready slider:changed", function (event, data) {
            $(this).nextAll(".output:first").html(data.value.toString().addCommas() + ' ' + currencySymbol);
        });

        $(document).delegate('.slider .dragger', 'click', function() {
            $(this).closest('.price-range').find('input[type=checkbox]').attr('checked', 'checked');
        });

        $('.filter-price-range').click(function() {
            if ($('#from-price-enabled').attr('checked') == 'checked')
                $.query.SET('priceMin', $('#from-price-value').val());
            else
                $.query.REMOVE('priceMin');
            if ($('#to-price-enabled').attr('checked') == 'checked')
                $.query.SET('priceMax', $('#to-price-value').val());
            else
                $.query.REMOVE('priceMax');

            window.location.href = window.location.protocol + '//' + window.location.host + window.location.pathname + $.query.toString();
        });
    </script>
}