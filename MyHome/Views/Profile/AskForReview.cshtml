@model Classy.DotNet.Mvc.ViewModels.Profiles.AskForReviewModel

@{
    ViewBag.Title = Localizer.Get("Profile_AskForReview");
}

<div class="row">
    <div class="col-md-8 main">
        <h1>@Localizer.Get("Profile_AskForReview")</h1>
        <hr />
       
        @if (Model.GoogleContacts != null && Model.GoogleContacts.Count() > 0)
        {
            <div class="google-contacts">
                @foreach (var contact in Model.GoogleContacts)
                {
                    <div class="row">
                        <div class="col-md-12">
                            <a class="email" data-name="@(string.IsNullOrEmpty(contact.Name) ? contact.Email : contact.Name)" data-email="@contact.Email" onclick="addContact(this)"><span>@(string.IsNullOrEmpty(contact.Name) ? contact.Email : string.Format("{0} <{1}>", contact.Name, contact.Email))</span></a>
                        </div>
                    </div>
                }
            </div>
        }

        @using (var f = Html.Bootstrap().Begin(new Form("AskForReview").RouteValues(new { ProfileId = Model.ProfileId }).FormMethod(FormMethod.Post).Id("AskForReviewForm")))
        {
            @*<div class="form-group">
                <label class="control-label" for="manualEmail">@Localizer.Get("AskForReview_AddAddressManually")</label>
                <div class="input-group">
                    <input type="text" id="manualEmail" autocomplete="off" class="form-control">
                    <span class="input-group-btn">
                        <button class="btn btn-default" type="button" onclick="addManualContact();">@Localizer.Get("AskForReview_AddAddress")</button>
                    </span>
                </div>
            </div>*@
            @f.FormGroup().TextAreaFor(x => x.Contacts).Rows(3).HelpText(Localizer.Get("AskForReview_Message_Help")).ShowValidationMessage(false).Label().ShowRequiredStar(false)
            @f.FormGroup().TextAreaFor(x => x.Message).Rows(5).Value(Localizer.Get("AskForReviews_DefaultMessage")).ShowValidationMessage(false).Label().ShowRequiredStar(false)
            @*@Html.Bootstrap().CheckBoxFor(x => x.SaveAsDefault).IsChecked(false).ShowValidationMessage(false).Label().ShowRequiredStar(false)*@
            @f.FormGroup().CustomControls(Html.Bootstrap().Button().Text(Localizer.Get("AskForReviews_Submit")).Style(ButtonStyle.Primary).HtmlAttributes(new { onclick = "AskForReviewForm.submit()" }))
        }
    </div>
    <div class="col-md-3 col-md-offset-1 helpbar">
        <div class="helpbar">
            <h1>@Localizer.Get("AskForReview_Help_Title")</h1>
            <div class="content">
                @Localizer.Get("AskForReview_Help_Content")
                <div class="text-center">
                    <hr/>
                    @if (!Model.IsGoogleConnected)
                    {
                        <div class="lnk-select-contant">
                            <a href="#" onclick="auth()" class="btn btn-danger">@Localizer.Get("AskForReviews_ImportFromGmail")</a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    div.tagsinput {
        border: 1px solid #CCC;
        background: #FFF;
        padding: 5px;
        width: 300px;
        height: 100px;
        overflow-y: auto;
    }

        div.tagsinput span.tag {
            border: 1px solid #a5d24a;
            -moz-border-radius: 2px;
            -webkit-border-radius: 2px;
            display: block;
            float: left;
            padding: 5px;
            text-decoration: none;
            background: #cde69c;
            color: #638421;
            margin-right: 5px;
            margin-bottom: 5px;
            font-family: helvetica;
            font-size: 13px;
        }

            div.tagsinput span.tag a {
                font-weight: bold;
                color: #82ad2b;
                text-decoration: none;
                font-size: 11px;
            }

        div.tagsinput input {
            width: 80px;
            margin: 0px;
            font-family: helvetica;
            font-size: 13px;
            border: 1px solid transparent;
            padding: 5px;
            background: transparent;
            color: #000;
            outline: 0px;
            margin-right: 5px;
            margin-bottom: 5px;
        }

        div.tagsinput div {
            display: block;
            float: left;
        }

    .tags_clear {
        clear: both;
        width: 100%;
        height: 0px;
    }

    .not_valid {
        background: #FBD8DB !important;
        color: #90111A !important;
    }
</style>

@section scripts
{
    @Scripts.Render("~/Scripts/jquery.tagsinput.js")

    @if (!Model.IsGoogleConnected)
    {
        <script type="text/javascript">
            (function () {
                var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
                po.src = 'https://apis.google.com/js/client:plusone.js';
                var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
            })();

            var gmailContacts = [];

            var additionalParams = {
                client_id: "506100905279-ehjeh85fna4i912qss80p8m95d2adrt0.apps.googleusercontent.com",
                scope: "https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/contacts.readonly",
                immediate: true
            };

            function auth() {
                gapi.auth.authorize(additionalParams, signinCallback);
            }

            function signinCallback(authResult) {
                if (authResult && !authResult.error) {
                    var authParams = gapi.auth.getToken();
                    GoogleLogin(authParams.access_token);
                } else {
                    additionalParams.immediate = false;
                    gapi.auth.authorize(additionalParams, signinCallback);
                }
            }
        </script>
    }
    
    <script type="text/javascript">
        //$('#Contacts').tagsinput({
        //    confirmKeys: [13, 188],
        //    //itemValue: 'email',
        //    //itemText: 'name',
        //    tagClass: function (item) { return 'label label-success' }
        //});

        @if (!Model.IsGoogleConnected)
        {
            <text>
        var contacts = @(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(new List<Classy.DotNet.Services.GoogleContactView> { new Classy.DotNet.Services.GoogleContactView { Name = "Yuval Karjevski", Email = "juvaly@gmail.com" } })));
        $('#Contacts').tagsInput({
            width: 'auto',
            onAddTag: function(el, value) { console.log(value); },
            autocomplete_url: contacts
        });
            //$('#Contacts').tagsinput('input').typeahead({
            //    name: 'mail-contacts',
            //    local: $.map(contacts, function(contact) {
            //        return {
            //            'value': (contact.Name != null && contact.Name != '') ? contact.Name : contact.Email,
            //            'name': contact.Name,
            //            'email': contact.Email
            //        };
            //    }),
            //    template: '<p><strong>{{name}}</strong><p><p>{{email}}</p>',
            //    engine: Hogan
            //}).on('typeahead:selected', function(obj, item) { $('#Contacts').tagsinput('add', {"value":item.email,"text":item.name}) });
            </text>
        }

        //$(".bootstrap-tagsinput input").attr("readonly", "readonly");

        //function addContact(anchor) {
        //    var name = $(anchor).data("name");
        //    var email = $(anchor).data("email");
        //    $('#Contacts').tagsinput('add', { "Email": email, "Name": name });
        //}

        //function addManualContact() {
        //    var email = $("#manualEmail").val();
        //    if (email.trim() != "") {
        //        $('#Contacts').tagsinput('add', { "Email": email, "Name": email });
        //        $("#manualEmail").val('');
        //    }
        //}

        
        //$('#manualEmail').typeahead({
        //    name: 'mail-contacts',
        //    local: $.map(contacts, function(contact) {
        //        return {
        //            'value': (contact.Name != null && contact.Name != '') ? contact.Name : contact.Email,
        //            'name': contact.Name,
        //            'email': contact.Email
        //        };
        //    }),
        //    template: '<p><strong>{{name}}</strong><p><p>{{email}}</p>',
        //    engine: Hogan
        //}).on('typeahead:selected', function(obj, item) { $('#manualEmail').val(item.email); });
    </script>
}