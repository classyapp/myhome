@model Classy.DotNet.Mvc.ViewModels.Profiles.SearchProfileViewModel<MyHome.Models.ProfessionalMetadata>

@{
    var categories = Localizer.GetList("professional-categories");
    var countries = Classy.DotNet.Responses.AppView.SupportedCountries;
    var cities = Localizer.GetCitiesWithCountries();
    var loc = (!string.IsNullOrEmpty(Model.Country) && Model.Country != "current-location" && countries.Any(x => x.Value == Model.Country)) ? countries.Single(x => x.Value == Model.Country).Text[System.Threading.Thread.CurrentThread.CurrentUICulture.TwoLetterISOLanguageName] : "";
    ViewBag.Title = string.Format(Localizer.Get("ProfileSearch_PageTitle"), !string.IsNullOrEmpty(Model.Category) ? categories.Single(x => x.Value == Model.Category).Text : Localizer.Get("ProfileSearch_Professionals"), loc);
    ViewBag.MetaDescription = string.Format(Localizer.Get("ProfileSearch_MetaDescription"), !string.IsNullOrEmpty(Model.Category) ? categories.Single(x => x.Value == Model.Category).Text : Localizer.Get("ProfileSearch_Professionals"), loc);
    var totalPages = (int)Math.Ceiling((decimal)Model.Count / Classy.DotNet.Responses.AppView.PageSize);
    var pagesCount = Classy.DotNet.Responses.AppView.PagesCount;
    var page = string.IsNullOrEmpty(Request["page"]) ? 1 : int.Parse(Request["page"]);
}

<div class="row">
    <div class="sidebar col-md-3">
        <div class="panel panel-default panel-first">
            <div class="panel-heading">
                <h3 class="panel-title">@Localizer.Get("SearchProfiles_Sidebar_Categories")</h3>
            </div>
            <div class="panel-body panel-links">
                @foreach (var c in categories)
                {
                    @Html.RouteLinkForCurrentLocale(c.Text, "SearchProfiles", new { filters = new Classy.DotNet.Mvc.ViewModels.Profiles.SearchProfileViewModel<MyHome.Models.ProfessionalMetadata> { Country = Model.Country, City = Model.City, Category = c.Value }.ToSlug() })
                }
            </div>
        </div>
    </div>

    <div class="main col-md-9">
        @if (Model.Category != null)
        {
            <h1>@categories.Single(x => x.Value == Model.Category).Text</h1>
        }
        else
        {
            <h1>@Localizer.Get("ProfileSearch_ResultsHeader_AllPros")</h1>
        }

        <div class="label-container">
            @{ 
                var hasCountry = !string.IsNullOrEmpty(Model.Country);
                var hasCategory = !string.IsNullOrEmpty(Model.Category);
            }
            @if (!hasCountry || !hasCategory)
            {
                <span class="hidden" itemscope itemtype="http://data-vocabulary.org/Breadcrumb">
                    <a itemprop="url" href="@Url.RouteUrlForCurrentLocale("SearchProfiles", new { filters = "" })"><span itemprop="title">@Localizer.Get("ProfileSearch_AllProfessionals")</span></a>
                </span>
            }
            @if (!string.IsNullOrEmpty(Model.Category))
            {
                <span class="label label-danger" itemscope itemtype="http://data-vocabulary.org/Breadcrumb">
                    <a itemprop="url" href="@Url.RouteUrlForCurrentLocale("SearchProfiles", new { filters = new Classy.DotNet.Mvc.ViewModels.Profiles.SearchProfileViewModel<MyHome.Models.ProfessionalMetadata> { Category = Model.Category }.ToSlug() })"><span itemprop="title">@categories.Single(x => x.Value == Model.Category).Text</span></a>
                    <a class="dismiss" href="@Url.RouteUrlForCurrentLocale("SearchProfiles", new { filters = "" })">x</a>
                </span>
            }
            @if (hasCountry)
            {
                <span class="hidden" itemscope itemtype="http://data-vocabulary.org/Breadcrumb">
                    <a itemprop="url" href="@Url.RouteUrlForCurrentLocale("SearchProfiles", new { filters = new Classy.DotNet.Mvc.ViewModels.Profiles.SearchProfileViewModel<MyHome.Models.ProfessionalMetadata> { Category = Model.Category, Country = Model.CountryCode }.ToSlug() })"><span itemprop="title">@countries.Single(x => x.Value == Model.CountryCode).Text[System.Threading.Thread.CurrentThread.CurrentUICulture.TwoLetterISOLanguageName]</span></a>
                </span>
            }
        </div>

        <hr />

        <div class="search-form">
            @using (var f = Html.Bootstrap().Begin(new Form("Search", "Profile").RouteValues(new { filters = "" }).Type(FormType.Inline).FormMethod(FormMethod.Post)))
            {
                @f.FormGroup().TextBoxFor(x => x.Name).Placeholder(Localizer.Get("SearchProfiles_Label_Name")).ShowValidationMessage(false).Label().Class("sr-only")
                @Html.HiddenFor(x => x.Country)
                @Html.HiddenFor(x => x.City)
                @f.FormGroup().TextBox("Locality").Id("Locality").Value(string.Concat(Model.City, !string.IsNullOrEmpty(Model.City) ?  ", " : "", countries.GetText(Model.CountryCode))).Class("typeahead").HtmlAttributes(new { data_provide = "typeahead" }).Placeholder(Localizer.Get("SearchProfiles_CityPlaceholder")).ShowValidationMessage(false).Label().Class("sr-only")
                @f.FormGroup().DropDownListFor(x => x.Category, categories.AsSelectList()).OptionLabel(Localizer.Get("SearchProfiles_Label_CategoryDefaultOption")).ShowValidationMessage(false).Label().Class("sr-only")
                @Html.TextBoxFor(x => x.Latitude, new { @class = "hidden" })
                @Html.TextBoxFor(x => x.Longitude, new { @class = "hidden" })

                @Html.Bootstrap().SubmitButton().Text(Localizer.Get("SearchProfiles_Label_Submit")).Style(ButtonStyle.Primary)
            }
        </div>

        <div class="row results iscroll" data-item-class=".profile" data-hasMore="@(Model.Results.Count == Classy.DotNet.Responses.AppView.PageSize ? "true" : "false")"
            data-url="@Url.RouteUrlForCurrentLocale("SearchProfiles")"
            data-page-size="@Classy.DotNet.Responses.AppView.PageSize"
            data-page="@page">
            @if (Model.Results != null)
            {
                @Html.Partial("ProfileGrid", Model.Results)
            }
        </div>
        <div class="clearfix text-center hidden" id="iscrollLoading"><img src="~/img/ajax-loader.gif" /></div>
        <div id="pager" class="text-center">
            <ul class="pagination" data-total="@totalPages" data-pages="@pagesCount">
                <li><a href="#">@Localizer.Get("Paging_Prev")</a></li>
                @for (int i = 0; i < Classy.DotNet.Responses.AppView.PagesCount; i++)
                {
                    <li><a href="#">@(i + 1)</a></li>
                }
                <li><a href="#">@Localizer.Get("Paging_Next")</a></li>
            </ul>
            @if (page < totalPages)
            {
                <a href="@(Url.RouteUrlForCurrentLocale("SearchProfiles") + string.Format("?Page={0}", page + 1))" class="sr-only">@Localizer.Get("Paging_Next")</a>
            }
        </div>
    </div>
</div>

@section PreFooter {
    <div class="container">
        <div class="row">
            <div class="col-md-offset-3 col-md-9">
                @if (page <= 1) {
                <div class="more-info">
                    <p>@Html.Raw(Localizer.Get(string.Concat("SEO_SearchProfessionals_", Model.Category ?? "All_Professionals")))</p>
                </div>
                }
            </div>
        </div>
    </div>
    
}

@section scripts {
    @Scripts.Render("~/Scripts/iscroll.js")
    @Scripts.Render("~/scripts/hogan-2.0.0.js")
    @Scripts.Render("~/scripts/typeahead.min.js")

    <script>
        resetPagination(@page);
        $(document).on("classy.gps.available", function (e, data) {
            if (data.Available) {
                $("#Location").prepend("<option value=\"current-location\">" + Classy.Strings.NearMe + "</option>");
                $("#Latitude").val(data.Latitude);
                $("#Longitude").val(data.Longitude);
                $("#Location").val(Classy.ParseQueryString().location || Classy.GetCookie(Classy.Env.CountryCookieName) || $("#Location_Address_Country").val());
            } else {
                $("#Latitude").val("");
                $("#Longitude").val("");
            }
        });

        var validLocation = true;
        $('.typeahead')
            .typeahead({
                local: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(cities))
                })
            .on('typeahead:opened', function() {
                validLocation = false;
            })
            .on('typeahead:selected', function (e, item) {
                if (item.value.indexOf(',') > -1) {
                    var parts = item.value.split(',');
                    $('#City').val(parts[0]);
                    $('#Country').val(parts[1].trim());
                } else {
                    $('#City').val('');
                    $('#Country').val(item.value);
                }
                validLocation = true;
            })
            .on('typeahead:autocompleted', function (e, item) {
                if (item.value.indexOf(',') > -1) {
                    var parts = item.value.split(',');
                    $('#City').val(parts[0]);
                    $('#Country').val(parts[1].trim());
                } else {
                    $('#City').val('');
                    $('#Country').val(item.value);
                }
                validLocation = true;
            })
            .on('typeahead:closed', function() {
                if (!validLocation)
                {
                    $('#City').val('');
                    $('#Country').val('');
                }
            })
            .on('change', function() {
                if ($(this).val() == '') {
                    $('#City').val('');
                    $('#Country').val('');
                }
            });
    </script>
}
