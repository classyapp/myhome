@{
    var env = new
    {
        Culture = UICulture,
        Currency = Request["env.currency"] ?? "ILS",
        Country = Request["enc.locaction"] ?? "IL"
    };

    var rooms = Localizer.GetList("rooms");
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <meta http-equiv="X-Come-Code-With-Us" content="@Localizer.Get("Layout_RecruitingMetaTag")" />

    <link rel="canonical" href="http://www.myhome.co.il@(Url.RouteUrl(ViewContext.RouteData.DataTokens["OriginalRouteName"] as string))" />
    <link rel="alternate" href="http://www.myhome.co.il@(Url.RouteUrl(ViewContext.RouteData.DataTokens["OriginalRouteName"] as string))" hreflang="x-default" />
    @foreach (var culture in Localizer.SupportedCultures)
    {
        <link rel="alternate" hreflang="@culture.Name" href="http://www.myhome.co.il@(Url.RouteUrlForLocale(ViewContext.RouteData.DataTokens["OriginalRouteName"] as string, culture.Name))" />    
    }
    
    <title>@ViewBag.Title</title>
    @if (env.Culture == "he-IL") {
        @Styles.Render("~/Content/css/rtl")
    }
    else 
    {
        @Styles.Render("~/Content/css/ltr")
    }
    @Scripts.Render("~/bundles/modernizr")
</head>
<body>
    <!-- nav -->
    <nav class="navbar navbar-inverse navbar-fixed-top" role="navigation">
        <div class="container">
            <!-- Brand and toggle get grouped for better mobile display -->
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand" href="@Url.RouteUrlForCurrentLocale("Home")"></a>
            </div>
            <!-- Collect the nav links, forms, and other content for toggling -->
            <div class="collapse navbar-collapse" id="navbar-collapse">
                <ul class="nav navbar-nav">
                    <li class="dropdown">
                        <a href="@Url.RouteUrlForCurrentLocale("SearchPhoto")" class="dropdown-toggle" data-toggle="dropdown">@Localizer.Get("Header_Nav_Photos") <b class="caret"></b></a>
                        <ul class="dropdown-menu">
                            @foreach (var r in rooms)
                            {
                                <li class="@(r.ParentValue == null ? "top" : "")">@Html.RouteLinkForCurrentLocale(r.Text, "SearchPhoto", new { filters = new MyHome.Models.PhotoMetadata { Room = r.Value }.GetSearchFilterSlug(null, null) })</li>
                            }
                        </ul>
                    </li>
                    <li><a href="@Url.RouteUrlForCurrentLocale("SearchProfiles")">@Localizer.Get("Header_Nav_FindPros")</a></li>
                </ul>
                @*<div class="col-sm-3 col-md-3 pull-left">
                    <form class="navbar-form" role="search">
                        <div class="input-group">
                            <input type="text" class="form-control" placeholder="@Localizer.Get("Header_Nav_Search")" name="srch-term" id="srch-term">
                            <div class="input-group-btn">
                                <button class="btn btn-default" type="submit"><i class="glyphicon glyphicon-search"></i></button>
                            </div>
                        </div>
                    </form>
                </div>*@
                <ul class="nav navbar-nav">
                </ul>
                <ul class="nav navbar-nav navbar-right">
                    <li><a href="@Url.RouteUrlForCurrentLocale("FindProfileToReview")" authorize><span class="glyphicon glyphicon-comment"></span> @Localizer.Get("Header_Nav_WriteReview")</a></li>
                    <li><a href="@Url.RouteUrlForCurrentLocale("CreatePhoto")" authorize><span class="glyphicon glyphicon-upload"></span> @Localizer.Get("Header_Nav_Upload")</a></li>

                    <li class="dropdown">
                        <a href="#language-select" data-toggle="modal" data-target="#env-modal">@env.Culture.Substring(0, 2).ToUpper() <b class="caret"></b></a>
                    </li>

                    @if (Request.IsAuthenticated)
                    {
                        var p = (User.Identity as Classy.DotNet.Security.ClassyIdentity).Profile;
                        <li class="dropdown">
                            <a href="@Url.RouteUrl("PublicProfile", env.Culture)" class="dropdown-toggle" data-toggle="dropdown">
                                <span class="glyphicon glyphicon-user"></span> @p.GetProfileName()
                                <b class="caret"></b>
                            </a>
                            <ul class="dropdown-menu">
                                <li class="profile">
                                    <a href="@Url.RouteUrl("PublicProfile", new { ProfileId = p.Id })">
                                        <div class="pull-left">
                                            <img src="@p.AvatarUrl(30, true)" width="30" />
                                            @Localizer.Get("Header_Nav_MyProfile")
                                        </div>
                                    </a>
                                </li>
                                <li class="divider"></li>
                                <li><a href="@Url.RouteUrl("Logout")"><i class="glyphicon glyphicon-log-out"></i> @Localizer.Get("Header_Nav_Logout")</a></li>
                            </ul>
                        </li>
                    }
                    else
                    {
                    <li class="dropdown">
                        <a href="@Url.RouteUrl("Login")" class="dropdown-toggle" data-toggle="dropdown">
                            <span class="glyphicon glyphicon-log-in"></span> @Localizer.Get("Header_Nav_Login")
                        </a>
                        <ul class="dropdown-menu login-dropdown">
                            <li>
                                <button id="sign-in-facebook" class="btn btn-fb-login btn-block">@Localizer.Get("Login_Facebook")</button>
                            </li>
                            <li class="divider"></li>
                            <li>
                                <div class="row">
                                    <div class="col-md-12">
                                        <form class="form" role="form" method="post" action="@Url.RouteUrl("Login")" id="login-nav">
                                            <div class="form-group">
                                                <label class="sr-only" for="Email">@Localizer.Get("Login_Email")</label>
                                                <input type="text" class="form-control" id="Email" name="Email" placeholder="@Localizer.Get("Login_Email")">
                                            </div>
                                            <div class="form-group">
                                                <label class="sr-only" for="Password">@Localizer.Get("Login_Password")</label>
                                                <input type="password" class="form-control" id="Password" name="Password" placeholder="@Localizer.Get("Login_Password")">
                                            </div>
                                            <div class="checkbox">
                                                <label>
                                                    <input type="checkbox"> @Localizer.Get("Login_RememberMe")
                                                </label>
                                            </div>
                                            <div class="form-group">
                                                <button type="submit" class="btn btn-primary btn-block">@Localizer.Get("Login_Submit")</button>
                                            </div>
                                            <div class="text-center">
                                                @Html.RouteLink(Localizer.Get("Login_Register"), "Register")
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </li>
                        </ul>
                    </li>
                    }
                </ul>
            </div>
            <!-- /.navbar-collapse -->
        </div>
    </nav>

    <div class="pre-content">
        @RenderSection("PreContent", false)
    </div>

    <div class="content container">
        @RenderBody()
    </div> <!-- /container -->

    <div class="pre-footer">
        @RenderSection("PreFooter", false)
    </div>

    <div class="footer text-center">
        <p>&copy; @Html.Raw(Localizer.Get("Footer_Copyright"))</p>
    </div>

    <!-- fb api -->
    <div id="fb-root"></div>
    <script>
        // Additional JS functions here
        window.fbAsyncInit = function () {
            FB.init({
                appId: '13237044783', // App ID
                channelUrl: '//www.myhome.co.il/channel.html', // Channel File
                status: true, // check login status
                cookie: true, // enable cookies to allow the server to access the session
                xfbml: true  // parse XFBML
            });
        };

        // Load the SDK asynchronously
        (function (d) {
            var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
            if (d.getElementById(id)) { return; }
            js = d.createElement('script'); js.id = id; js.async = true;
            js.src = "//connect.facebook.net/en_US/all.js";
            ref.parentNode.insertBefore(js, ref);
        }(document));
    </script>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")

    @Scripts.Render("~/scripts/classy.js")
    @Scripts.Render("~/scripts/fb-login.js")
    @Scripts.Render("~/scripts/google-login.js")
    @Scripts.Render("~/scripts/trigger-action.js")

    <!-- login modal -->
    <div class="modal fade" id="login-modal" data-remote="@Url.RouteUrl("Login")" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <!-- will be replaced -->
            </div>
        </div>
    </div>

    <!-- add to collection modal -->
    <div class="modal fade" id="collect-modal" data-remote="@Url.RouteUrl("AddListingToCollection", new { })" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content" id="collect-modal-replace">
                <!-- will be replaced -->
            </div>
        </div>
    </div>

    <!-- language selection modal -->
    <div class="modal fade" id="env-modal" data-remote="@Url.RouteUrl("EnvironmentSettings", new { })" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <!-- will be replaced -->
            </div>
        </div>
    </div>

    <!-- photo edit mpdal -->
    <div class="modal fade" id="photo-modal" data-remote="" data-url="@Url.RouteUrl("EditPhoto", new { listingId = "ID" })" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content" id="edit-modal-replace">
                <!-- will be replaced -->
            </div>
        </div>
    </div>

    <!-- change password -->
    <div class="modal fade" id="change-password-modal" data-remote="@Url.RouteUrl("ChangePassword")" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content" id="change-password-replace">
                <!-- will be replaced -->
            </div>
        </div>
    </div>

    <script>
        Classy.IsAuthenticated = @User.Identity.IsAuthenticated.ToString().ToLower();
        Classy.CurrentPage = "@Url.RouteUrlForLocale(ViewContext.RouteData.DataTokens["OriginalRouteName"] as string, env.Culture)";
        Classy.CurrentPageNoLocale = "@Url.RouteUrl(ViewContext.RouteData.DataTokens["OriginalRouteName"] as string)";

        $(function () {
            $('.modal[data-remote]')
                .on('shown.bs.modal', function() {
                    Classy.AjaxReconnect();
                })
                .on('hidden.bs.modal', function() {
                    $(this).removeData('bs.modal');
                    $(this).find('.modal-body').html("");
                });
        });

        function CloseModal(data) { 
            if (data.indexOf("validation-summary-errors") > -1) 
                return false;
            else {
                $('.modal').modal('hide');
                return true;
            }
        };

        function attachValidation(frm) {
            jQuery.validator.unobtrusive.parse(frm);
            $(frm).bind("invalid-form.validate", function (form) {
                $('.bmvc-3-validation-summary').addClass('alert alert-danger').find('.close').show();
            });
        }

        var msgConfirm = '@Localizer.Get("Global_Message_Confirm")';

        Classy.AcquireGPSCoordinates();
    </script>

    @RenderSection("scripts", required: false)
</body>
</html>